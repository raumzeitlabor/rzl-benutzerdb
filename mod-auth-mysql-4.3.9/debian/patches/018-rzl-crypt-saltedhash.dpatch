#! /bin/sh /usr/share/dpatch/dpatch-run
## 018-rzl-crypt-saltedhash.dpatch by Simon Elsbrock <simon@iodev.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' mod-auth-mysql-4.3.9~/mod_auth_mysql.c mod-auth-mysql-4.3.9/mod_auth_mysql.c
--- mod-auth-mysql-4.3.9~/mod_auth_mysql.c	2012-11-28 16:20:24.000000000 +0100
+++ mod-auth-mysql-4.3.9/mod_auth_mysql.c	2012-11-28 16:20:57.451982182 +0100
@@ -105,6 +105,7 @@
 #endif
 #define SHA1SUM_ENCRYPTION_FLAG		1<<6
 #define APACHE_ENCRYPTION_FLAG		1<<7
+#define CRYPT_SALTEDHASH_ENCRYPTION_FLAG		1<<8
 
 /* from include/sha1.h from the mysql-server source distribution */
 #define SHA1_HASH_SIZE 20 /* Hash size in bytes */
@@ -241,6 +242,66 @@
 	return (!strcmp(scrambled_passwd, enc_passwd));
 }
 
+/*
+ * Verifies a hash generated by the Crypt::SaltedHash Perl module.
+ *
+ */
+static int check_Crypt_SaltedHash(const char *passwd, char *enc_passwd)
+{
+	/* 1: Check the hashing algorithm (SHA-1 only right now). */
+	if (strncmp(enc_passwd, "{SSHA}", strlen("{SSHA}")) != 0) {
+		/* Unfortunately, we cannot log to the apache logfile from this
+		 * path of the code. */
+		return 0;
+	}
+
+	const char *payload = enc_passwd + strlen("{SSHA}");
+
+	/* 2: base64-decode the data */
+	char decoded[25];
+#ifdef APACHE2
+	if (apr_base64_decode_len(payload) != 25) {
+		/* Malformed hash: SHA-1 hashes have to be decoded to 24 bytes
+		 * (20 bytes digest, 4 bytes salt). */
+		return 0;
+	}
+	apr_base64_decode(decoded, payload);
+#else
+	if (ap_base64decode_len(payload) != 25) {
+		/* Malformed hash: SHA-1 hashes have to be decoded to 24 bytes
+		 * (20 bytes digest, 4 bytes salt). */
+		return 0;
+	}
+	ap_base64decode(decoded, payload);
+
+#endif
+
+	/* 3: sha-1 hash the given password with the extracted salt */
+#ifdef APACHE2
+	apr_sha1_ctx_t ct;
+	char hash[APR_SHA1_DIGESTSIZE];
+
+	apr_sha1_init(&ct);
+	apr_sha1_update(&ct, passwd, strlen(passwd));
+	/* The salt is stored after the digest. */
+	apr_sha1_update(&ct, decoded + 20, 4);
+	apr_sha1_final(hash, &ct);
+#else
+	AP_SHA1_CTX ct;
+	char hash[SHA_DIGESTSIZE];
+
+	ap_SHA1Init(&ct);
+	ap_SHA1Update(&ct, passwd, strlen(passwd));
+	/* The salt is stored after the digest. */
+	ap_SHA1Update(&ct, decoded + 20, 4);
+	ap_SHA1Final(hash, &ct);
+#endif
+
+	/* 4: compare whether extracted hash and computed hash match */
+	return (strncmp(hash, decoded, APR_SHA1_DIGESTSIZE) == 0);
+
+}
+
 static int check_apache_encryption(const char *passwd, char *enc_passwd)
 {
 #ifdef APACHE2
@@ -269,6 +330,7 @@
 	{ "PHP_MD5",		check_PHP_MD5_encryption,		PHP_MD5_ENCRYPTION_FLAG	},
 	{ "SHA1Sum",	check_SHA1Sum_encryption, SHA1SUM_ENCRYPTION_FLAG},
 	{ "Apache",		check_apache_encryption,		APACHE_ENCRYPTION_FLAG  },
+	{ "Crypt_SaltedHash",   check_Crypt_SaltedHash,                 CRYPT_SALTEDHASH_ENCRYPTION_FLAG },
 	/* add additional encryption types below */
 	{ NULL,			NULL,					0 }
 };
